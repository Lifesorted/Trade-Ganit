/**
 * 
 */
package com.majesco.test.dm.tasks.ui.dm;

import java.util.logging.Logger;

import com.majesco.test.dm.page_objects.ContactDetailPage;
import com.majesco.test.dm.tasks.ui.common.NavigateTo;
import com.majesco.test.dm.utils.DataHelper;

import static net.serenitybdd.screenplay.matchers.WebElementStateMatchers.*;
import net.serenitybdd.core.steps.UIInteractions;
import net.serenitybdd.screenplay.Actor;
import net.serenitybdd.screenplay.Task;
import net.serenitybdd.screenplay.actions.SelectFromOptions;
import net.serenitybdd.screenplay.ensure.Ensure;
import net.serenitybdd.screenplay.questions.Text;
import net.serenitybdd.screenplay.waits.WaitUntil;

/**
 * @author Shaile908568
 *
 */
public class VerifyContactDetails extends UIInteractions implements Task {

	private static Logger logger = Logger.getLogger(DataHelper.class.getName());
	private static String addresstype;
	private static String line1;
	private static String city;
	private static String state;
	private static String zip;
	
	public VerifyContactDetails(String addresstype, String line1, String city, String state, String zip) {
		this.addresstype = addresstype;
		this.line1 = line1;
		this.city = city;
		this.state = state;
		this.zip = zip;
	}
	
	public static VerifyContactDetails fromUnderlineDetails() {
		addresstype = DataHelper.getRecord("Contact_Details", 1, 0);
		line1 = DataHelper.getRecord("Contact_Details", 1, 1);
		city = DataHelper.getRecord("Contact_Details", 1, 2);
		state = DataHelper.getRecord("Contact_Details", 1, 3);
		zip = DataHelper.getRecord("Contact_Details", 1, 4);

		return new VerifyContactDetails(addresstype, line1, city, state, zip);
	}
	
	@Override
	public <T extends Actor> void performAs(T actor) {
		
		actor.attemptsTo(WaitUntil.the(ContactDetailPage.ADDRESS_TYPE, isVisible())
				.then(SelectFromOptions.byVisibleText(addresstype).from(ContactDetailPage.ADDRESS_TYPE)));
		waitABit(1500);
		
        if (ContactDetailPage.ADDRESS_TYPE_RES.isVisibleFor(actor)) {
        	actor.attemptsTo(WaitUntil.the(ContactDetailPage.ADDRESS_TYPE_RES, isVisible())
    				.then(Ensure.that(actor.asksFor(Text.of(ContactDetailPage.ADDRESS_TYPE_RES))).isEqualTo(addresstype)));
    		waitABit(999);
    		
    		actor.attemptsTo(WaitUntil.the(ContactDetailPage.FULL_ADDRESS, isVisible())
    				.then(Ensure.that(actor.asksFor(Text.of(ContactDetailPage.FULL_ADDRESS))).contains(line1)));
    		waitABit(999);
		}else {
			NavigateTo.licenseTab();
		}
		
		
	}

}
