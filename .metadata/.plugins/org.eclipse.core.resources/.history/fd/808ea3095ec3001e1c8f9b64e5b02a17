/**
 * 
 */
package com.majesco.test.dm.tasks.ui.dm;

import static net.serenitybdd.screenplay.matchers.WebElementStateMatchers.isVisible;

import com.majesco.test.dm.page_objects.BankDetailPage;
import com.majesco.test.dm.page_objects.PolicyDetailPage;
import com.majesco.test.dm.utils.DataHelper;

import net.serenitybdd.core.steps.UIInteractions;
import net.serenitybdd.screenplay.Actor;
import net.serenitybdd.screenplay.Task;
import net.serenitybdd.screenplay.ensure.Ensure;
import net.serenitybdd.screenplay.waits.WaitUntil;

/**
 * @author Shaile908568
 *
 */
public class VerifyPolicyDetails extends UIInteractions implements Task {

	private static String carrier;
	private static String policyNo;
	private static String effectiveFrom;
	private static String expiryDate;
	private static String coverageAmount;

	public VerifyPolicyDetails(String carrier, String policyNo, String effectiveFrom, String expiryDate,
			String coverageAmount) {
		this.carrier = carrier;
		this.policyNo = policyNo;
		this.effectiveFrom = effectiveFrom;
		this.expiryDate = expiryDate;
		this.coverageAmount = coverageAmount;
	}
	
	public static VerifyPolicyDetails fromUnderlineDetails() {
		policyNo = DataHelper.getRecord("Policy_Details", 1, 0).replace("'", "");
		carrier = DataHelper.getRecord("Policy_Details", 1, 1);
		effectiveFrom = DataHelper.getRecord("Policy_Details", 1, 2);
		expiryDate = DataHelper.getRecord("Policy_Details", 1, 3);
		coverageAmount = DataHelper.getRecord("Policy_Details", 1, 4).replace("'", "").concat(".00");
		
		return new VerifyPolicyDetails(carrier, policyNo, effectiveFrom, expiryDate, coverageAmount);
    }

	@Override
	public <T extends Actor> void performAs(T actor) {

		waitABit(2000);
		actor.attemptsTo(WaitUntil.the(PolicyDetailPage.POLICY_NO, isVisible()));
		String expectedPolicyno = PolicyDetailPage.POLICY_NO.resolveFor(actor).getText();
		System.out.println("policy "+expectedPolicyno);
				Ensure.that(expectedPolicyno).asAnInteger();
		waitABit(999);
		
		String excarrier = PolicyDetailPage.CARRIER.resolveFor(actor).getAttribute("title");
		actor.attemptsTo(WaitUntil.the(PolicyDetailPage.CARRIER, isVisible()));
				Ensure.that(excarrier).isEqualTo(carrier);
		waitABit(999);
		
		String exEffectivefrom = PolicyDetailPage.EFFECTIVE_FROM.resolveFor(actor).getAttribute("title");
		actor.attemptsTo(WaitUntil.the(PolicyDetailPage.EFFECTIVE_FROM, isVisible()));
				Ensure.that(exEffectivefrom).isEqualTo(effectiveFrom);
		waitABit(999);
		
		String exExpiry = PolicyDetailPage.EXPIRY_DATE.resolveFor(actor).getAttribute("title");
		actor.attemptsTo(WaitUntil.the(PolicyDetailPage.EXPIRY_DATE, isVisible()));
				Ensure.that(exExpiry).isEqualTo(expiryDate);
		waitABit(999);
		
		String exAmount = PolicyDetailPage.AMOUNT.resolveFor(actor).getAttribute("title");
		actor.attemptsTo(WaitUntil.the(PolicyDetailPage.AMOUNT, isVisible()));
				Ensure.that(exAmount).isEqualTo(coverageAmount);
		waitABit(999);
		
	}

}
