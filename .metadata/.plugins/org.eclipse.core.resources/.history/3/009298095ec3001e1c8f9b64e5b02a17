/**
 * 
 */
package com.majesco.test.dm.tasks.ui.dm;

import static net.serenitybdd.screenplay.matchers.WebElementStateMatchers.isVisible;

import java.util.logging.Logger;

import com.majesco.test.dm.page_objects.HierarchyDetailPage;
import com.majesco.test.dm.page_objects.PersonalDetailPage;
import com.majesco.test.dm.tasks.db.dbtest;
import com.majesco.test.dm.utils.DataHelper;
import com.majesco.test.dm.utils.Key;

import net.serenitybdd.core.steps.UIInteractions;
import net.serenitybdd.screenplay.Actor;
import net.serenitybdd.screenplay.Task;
import net.serenitybdd.screenplay.actions.Click;
import net.serenitybdd.screenplay.ensure.Ensure;
import net.serenitybdd.screenplay.questions.Text;
import net.serenitybdd.screenplay.waits.WaitUntil;

/**
 * @author Shaile908568
 *
 */
public class VerifyHierarchyDetails extends UIInteractions implements Task {

	private static Logger logger = Logger.getLogger(DataHelper.class.getName());
	private static String agentno;
	private static String entityname;
	private static String role;
	private static String level;
	private static String channel;
	private static String entitytype;
	private static String contractstatus;

	public VerifyHierarchyDetails(String agentno, String entityname, String role, String level, String channel,
			String entitytype, String contractstatus) {
		this.agentno = agentno;
		this.entityname = entityname;
		this.role = role;
		this.level = level;
		this.channel = channel;
		this.entitytype = entitytype;
		this.contractstatus = contractstatus;
	}

	public static VerifyHierarchyDetails fromUnderlineDetails() {
		agentno = DataHelper.getRecord("Hierarchy_Details", 1, 0);
		entityname = DataHelper.getRecord("Hierarchy_Details", 1, 1);
		role = DataHelper.getRecord("Hierarchy_Details", 1, 2);
		level = DataHelper.getRecord("Hierarchy_Details", 1, 3);
		channel = DataHelper.getRecord("Hierarchy_Details", 1, 4);
		entitytype = DataHelper.getRecord("Hierarchy_Details", 1, 5);
		contractstatus = DataHelper.getRecord("Hierarchy_Details", 1, 6);

		return new VerifyHierarchyDetails(agentno, entityname, role, level, channel, entitytype, contractstatus);
	}

	@Override
	public <T extends Actor> void performAs(T actor) {

		waitABit(2000);
		String expectedentityname = HierarchyDetailPage.ENTITY_NAME.resolveFor(actor).getAttribute("title");
		actor.attemptsTo(WaitUntil.the(HierarchyDetailPage.ENTITY_NAME, isVisible()));
		Ensure.that(expectedentityname).isEqualTo(entityname);
		waitABit(999);

		String expectedrole = HierarchyDetailPage.ENTITY_ROLE.resolveFor(actor).getAttribute("title");
		actor.attemptsTo(WaitUntil.the(HierarchyDetailPage.ENTITY_ROLE, isVisible()));
		Ensure.that(expectedrole).isEqualTo(role);
		waitABit(999);

		String expectedlevel = HierarchyDetailPage.ENTITY_LEVEL.resolveFor(actor).getAttribute("title");
		actor.attemptsTo(WaitUntil.the(HierarchyDetailPage.ENTITY_LEVEL, isVisible()));
		Ensure.that(expectedlevel).isEqualTo(level);
		waitABit(999);

		String expectedchannel = HierarchyDetailPage.CHANNEL.resolveFor(actor).getAttribute("title");
		actor.attemptsTo(WaitUntil.the(HierarchyDetailPage.CHANNEL, isVisible()));
		Ensure.that(expectedchannel).isEqualTo(channel);
		waitABit(999);

		String expectedEtype = HierarchyDetailPage.ENTITY_TYPE.resolveFor(actor).getAttribute("title");
		actor.attemptsTo(WaitUntil.the(HierarchyDetailPage.ENTITY_TYPE, isVisible()));
		Ensure.that(expectedEtype).isEqualTo(entitytype);
		waitABit(999);
		
		String expectedBrokerNo = HierarchyDetailPage.BROKER_NO.resolveFor(actor).getAttribute("title");
		actor.attemptsTo(WaitUntil.the(HierarchyDetailPage.BROKER_NO, isVisible()));
		Ensure.that(expectedBrokerNo).isEqualTo(actor.recall(Key.BROKER_NUMBER));
		waitABit(999);

		String expectedCstatus = HierarchyDetailPage.CONTRACT_STATUS.resolveFor(actor).getAttribute("title");
		actor.attemptsTo(WaitUntil.the(HierarchyDetailPage.CONTRACT_STATUS, isVisible()));
		Ensure.that(expectedCstatus).isEqualTo(contractstatus);
		waitABit(1200);
		
		String agentno = actor.recall(Key.AGENT_NO);
		
		actor.attemptsTo(Click.on(HierarchyDetailPage.SLIDE_RIGHT_ICON));
		waitABit(1200);	
	}
}
